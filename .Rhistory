###
M = 1256                        # sæt max side-nummer (du behøves ikke køre til max med det samme)
link.list = list.updater(M)   # DONT CHANGE THIS LINE, KØR FØRST
data = pagelooper(1,5)            # S,M angiver min og max sidetal der skal loopes over.
data2 = store.payload(data, 651,100)
View(data2)
anyDuplicated(data2)
data= rbind(data, data.2)
data= rbind(data, data2)
anyDuplicated(data)
data= data2
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
data_geo = geodata.offline(data_clean)                         # brug evt geodata.offline istedet!
data_fin = area.matcher(data_geo)[[1]]    #area.matcher finder bykvarter for hver observation
bydel = area.matcher(data_geo)[[2]]
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
cleaner = function(data){
# unlist every column
for(i in 1:(NROW(N)-1)){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
N         = c("link", "address", "buysum", "date", "sqm_price", "n_rooms", "type", "m2","build_year")              # behold NA som første element!
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
N         = c(NA, "link", "address", "buysum", "date", "sqm_price", "n_rooms", "type", "m2","build_year")              # behold NA som første element!
for(i in 1:(NROW(N)-1)){
data[,i] = unlist(data[,i])
}
for(i in 1:(NCOL(N)-1)){
data[,i] = unlist(data[,i])
}
cleaner = function(data){
# unlist every column
for(i in 1:9){
data[,i] = unlist(data[,i])
}
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
cleaner = function(data){
# unlist every column
for(i in 1:9){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data_clean = cleaner(data2)        # Renser datasættet, (tager output fra pagelooper som argument!)
NROW(N)
library("rvest")
library("stringr")
library("ggplot2")
library("ggmap")
library("tidyr")
library("viridis")
library("broom")
library("maptools")
library("caret")
library("dplyr")
library("plyr")
data= data2
anyDuplicated(data)
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
cleaner = function(data){
# unlist every column
for(i in 1:9){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
data= data2
for(i in 1:9){
data[,i] = unlist(data[,i])
}
data[,0]
data[,1]
data[,9]
data[,10]
for(i in 1:9){
data[,i] = unlist(data[,i])
}
View(data2)
# replace - with NA's
data[data == "-"] <- NA
View(data)
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
View(data)
sapply(data, class)
data[1,1]
unlist(data[1,1])
unlist(data[1,1])[0]
unlist(data[1,1])[1]
unlist(data[1,1])[2]
unlist(data[1,1])[3]
unlist(data[1,1])[0]
sapply(data, class)
data[1,8]
unlist(data[1,8])
unlist(data[1,8])[0]
unlist(data[1,8])[1]
unlist(data[1,8])[2]
cleaner = function(data){
# unlist every column
for(i in 1:9){
data[,i] = unlist(data[,i][1])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
data_clean = cleaner(data2)        # Renser datasættet, (tager output fra pagelooper som argument!)
data= data2
anyDuplicated(data)
data_clean = cleaner(data2)        # Renser datasættet, (tager output fra pagelooper som argument!)
data_geo = geodata.offline(data_clean)                         # brug evt geodata.offline istedet!
addr = read.csv("adresser.csv", encoding = "UTF-8", stringsAsFactors = F)
subaddr = unique(addr[c("vejnavn","husnr","wgs84koordinat_bredde", "wgs84koordinat_længde", "postnr",
"postnrnavn","nøjagtighed", "højde")])
addr = read.csv("adresser.csv", encoding = "UTF-8", stringsAsFactors = F)
subaddr = unique(addr[c("vejnavn","husnr","wgs84koordinat_bredde", "wgs84koordinat_længde", "postnr",
"postnrnavn","nøjagtighed", "højde")])
View(data_clean)
View(data)
rm(data_clean, data)
data= data2
for(i in 1:9){
data[,i] = unlist(data[,i][1])
}
View(data)
sapply(data, class)
data[data == "-"] <- NA
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
data = data2
# unlist every column
for(i in 1:9){
data[,i] = unlist(data[,i][1])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
data = data2
View(data)
for(i in 1:9){
data[,i] = unlist(data[,i][1])
}
data = data2
unlist(data[,1])
t = as.data.frame(unlist(data[,1]))
View(t)
rm(t)
rm(t)
t = as.data.frame(unlist(data[,1]))
unlist(data[,8])
length(unlist(data[,8]))
length(unlist(data[,1]))
length(unlist(data[,1][1]))
unlist(data[,1])
unlist(data[,1])[1]
unlist(data[,1])[0]
unlist(data[,1])[36000]
unlist(data[,1])[36001]
unlist(data[,1])[36001][1]
unlist(data[,1])[36001][2]
scraper.singlepage = function(link){
#open html and read link  attribute from column 1
data <- link %>%
read_html()
data_attr <- data %>%
html_nodes("#searchresult h5 a") %>%
html_attr('href')
#bind as column in frame
frame = cbind(frame,as.list(data_attr))
#read all nodes in sequence without closing & reopening the html
for(i in css.list){
data_text = data  %>%
html_nodes(i)   %>%
html_text()
frame = cbind(frame, as.list(data_text))
}
colnames(frame) = N
return(out = frame[,2:ncol(frame)])
}
scraper.singlepage(link.list[1])
scraper.singlepage(link.list[653])
data = data2
data =data[,! names(data) %in% c('link')]
cleaner = function(data){
# unlist every column
for(i in 1:NROW(N)-1){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year","deduction")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year", "deduction")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
cleaner = function(data){
# unlist every column
for(i in 1:NROW(N)-1){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
for(i in 1:NROW(N)-1){
data[,i] = unlist(data[,i])
}
N         = c(NA, "address", "buysum", "date", "sqm_price", "n_rooms", "type", "m2","build_year", "deduction")              # behold NA som første element!
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
data = data2
data  <- data[,! names(data) %in% c('link')]
NROW(N)
css.list  = c(css.addr, css.buysum, css.date, css.sqm_price, css.rooms, css.type, css.m2, css.build)          # Navnelisten og denne skal matche 1:1
N         = c(NA, "address", "buysum", "date", "sqm_price", "n_rooms", "type", "m2","build_year")              # behold NA som første element!
data_clean = cleaner(data)        # Renser datasættet, (tager output fra pagelooper som argument!)
NROW(N)
cleaner = function(data){
# unlist every column
for(i in 1:NROW(N)-1){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data <- data2
data  <- data[,! names(data) %in% c('link')]
data_clean <- cleaner(data)
cleaner = function(data){
# unlist every column
for(i in 1:(NROW(N)-1)){
data[,i] = unlist(data[,i])
}
# replace - with NA's
data[data == "-"] <- NA
# fjern 1000-sepeartorer
data$buysum = gsub("\\.","", data$buysum) %>% as.numeric
data$sqm_price = gsub("\\.","", data$sqm_price) %>% as.numeric
# konverter til numeric
data[c("n_rooms","m2","build_year")] <- as.numeric(as.matrix(data[c("n_rooms","m2","build_year")]))
# Opdel date i faktisk dato og handelstype
data$tradetype = substr(data$date, 11,20)
data$date = substr(data$date, 1,10)
#convert date to actual date
data$date = as.Date(data$date, "%d-%m-%Y")
# clean all character columns of whitespace in begining and end of string
data[,sapply(data, class) == 'character'] <- lapply(data[,sapply(data, class) == 'character'], trimws)
#separer addressen (ufærdigt!)
data = data %>% separate(address, c("roadname", "area"),",")
data$floor = with(data, ifelse(grepl(". ", data$area, fixed = TRUE) == TRUE, substr(data$area,2,2), NA))
data$floor[data$floor == "S"] = 0
data$floor = as.numeric(data$floor)
#gen vejnavn & husnr vars
data$vejnavn = gsub(" [^ ]*$", "", data$roadname)
data$husnr = gsub(".* ", "", data$roadname)
return(clean_data = data)
}
data <- data2
data  <- data[,! names(data) %in% c('link')]
data_clean <- cleaner(data)
View(data_clean)
data_geo = geodata.offline(data_clean)                         # brug evt geodata.offline istedet!
data_fin = area.matcher(data_geo)[[1]]    #area.matcher finder bykvarter for hver observation
bydel = area.matcher(data_geo)[[2]]
data_geo = geodata.offline(data_clean)                         # brug evt geodata.offline istedet!
data_fin = area.matcher(data_geo)[[1]]    #area.matcher finder bykvarter for hver observation
# left join the scraped data info from danish address registries
geodata.offline = function(data){
out = left_join(data, subaddr, by = c("vejnavn", "husnr"))
#rename columns in output
names(out)[names(out) == "wgs84koordinat_bredde"] = "lat"
names(out)[names(out) == "wgs84koordinat_længde"] = "lon"
names(out)[names(out) == "højde"] = "height"
return(out)
}
###---------------------------------------------
###        4.3) area.matcher
###---------------------------------------------
###           note: sikkert mega suboptimal kode
area.matcher = function(data){
#Fjern NA'er så der kan matches med shapefilen over bydele
df_geo = subset(data, is.na(data$lon) == F & is.na(data$lat) == F)
geo = subset(data, is.na(data$lon) == F & is.na(data$lat) == F)
#read shapefile for kbh and convert it to dataframe
shape = readShapePoly("bydel.shp")
bydel = tidy(shape)
#assign coordinates to data input
coordinates(geo) = c("lon", "lat")
proj4string(geo) = proj4string(shape)
# giv unikt id baseret på hvilken bydel observationen er i
in_hood = over(geo, as(shape, "SpatialPolygons"))
# konverter til shape og giv ID værdi 11 for "other" (der er 10 kvarterer i shapefilen)
df_hood = tidy(in_hood)[,2] -1
df_hood$x = ifelse(is.na(df_hood$x), "11", df_hood$x)
# bind til dataframe
df_geo = cbind(df_geo, df_hood)
df_geo$nborhood = ifelse(df_geo$x == 0, "broenshoej",
ifelse(df_geo$x == 1, "oesterbro",
ifelse(df_geo$x == 2, "indre_by",
ifelse(df_geo$x == 3, "noerebro",
ifelse(df_geo$x == 4, "nordvest",
ifelse(df_geo$x == 5, "valby",
ifelse(df_geo$x == 6, "sydhavn",
ifelse(df_geo$x == 7, "amager_vest",
ifelse(df_geo$x == 8, "amager_øst",
ifelse(df_geo$x == 9, "vanloese",
ifelse(df_geo$x == 11, "other", NA
)))))))))))
#rename x
names(data)[names(data) == "x"] = "nbor_factor"
return(list(df_geo, bydel))
}
data_fin = area.matcher(data_geo)[[1]]    #area.matcher finder bykvarter for hver observation
library("maptools")
install.packages("maptools")
library("maptools")
data_fin = area.matcher(data_geo)[[1]]    #area.matcher finder bykvarter for hver observation
install.packages("rgdal")
library("maptools")
data_geo = geodata.offline(data_clean)                         # brug evt geodata.offline istedet!
data_fin = area.matcher(data_geo)[[1]]    #area.matcher finder bykvarter for hver observation
